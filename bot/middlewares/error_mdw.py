from typing import Callable, Awaitable, Any, Dict
from aiogram import BaseMiddleware
from aiogram.types import TelegramObject, Message, CallbackQuery, Update

from middleware.loggers import loggers  # –≤–∞—à –ª–æ–≥–≥–µ—Ä


class ErrorHandlingMiddleware(BaseMiddleware):
    """
    Middleware –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ —Ö–µ–Ω–¥–ª–µ—Ä–∞—Ö.

    –ó–∞—á–µ–º –Ω—É–∂–µ–Ω:
    - –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ–± –æ—à–∏–±–∫–∞—Ö
    - Graceful degradation –ø—Ä–∏ —Å–±–æ—è—Ö
    """

    def __init__(self, admin_ids: list[int]):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è middleware –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫.

        Args:
            admin_ids: –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        self.admin_ids = admin_ids
        super().__init__()

    async def __call__(
            self,
            handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
            event: TelegramObject,
            data: Dict[str, Any]
    ) -> Any:
        """
        –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –≤ —Ö–µ–Ω–¥–ª–µ—Ä–∞—Ö.
        """
        try:
            return await handler(event, data)

        except Exception as e:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
            user_str = self._extract_user_info(event)

            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            error_message = f"–û—à–∏–±–∫–∞ –≤ —Ö–µ–Ω–¥–ª–µ—Ä–µ: {type(e).__name__}: {str(e)}"

            loggers.error(
                text=error_message,
                log_type="HANDLER_ERROR",
                user=user_str
            )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            await self._notify_admins(error_message, event, user_str)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            await self._send_error_message(event, user_str)

            return None

    @staticmethod
    def _extract_user_info(event: TelegramObject) -> str:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ —Å–æ–±—ã—Ç–∏—è.

        Args:
            event: –û–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è

        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        user_str = "@System"

        # –î–ª—è Message –∏ CallbackQuery
        if isinstance(event, (Message, CallbackQuery)) and hasattr(event, 'from_user') and event.from_user:
            user = event.from_user
            user_str = f"@{user.username}" if user.username else f"id{user.id}"

        # –î–ª—è Update (–∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç message –∏–ª–∏ callback_query)
        elif isinstance(event, Update):
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–ª—è—Ö Update
            user_object = None
            if event.message and event.message.from_user:
                user_object = event.message.from_user
            elif event.edited_message and event.edited_message.from_user:
                user_object = event.edited_message.from_user
            elif event.callback_query and event.callback_query.from_user:
                user_object = event.callback_query.from_user
            elif event.channel_post and event.channel_post.from_user:
                user_object = event.channel_post.from_user
            elif event.edited_channel_post and event.edited_channel_post.from_user:
                user_object = event.edited_channel_post.from_user

            if user_object:
                user_str = f"@{user_object.username}" if user_object.username else f"id{user_object.id}"

        return user_str

    @staticmethod
    def _extract_event_text(event: TelegramObject) -> str:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–±—ã—Ç–∏—è.

        Args:
            event: –û–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è

        Returns:
            –¢–µ–∫—Å—Ç —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        """
        event_text = ""

        # –î–ª—è Message
        if isinstance(event, Message) and hasattr(event, 'text') and event.text:
            event_text = event.text
        # –î–ª—è CallbackQuery
        elif isinstance(event, CallbackQuery) and hasattr(event, 'data') and event.data:
            event_text = f"callback: {event.data}"
        # –î–ª—è Update
        elif isinstance(event, Update):
            if event.message and event.message.text:
                event_text = event.message.text
            elif event.callback_query and event.callback_query.data:
                event_text = f"callback: {event.callback_query.data}"
            elif event.edited_message and event.edited_message.text:
                event_text = event.edited_message.text

        return event_text[:100] + "..." if len(event_text) > 100 else event_text

    async def _notify_admins(
            self,
            error_message: str,
            event: TelegramObject,
            user_str: str
    ) -> None:
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ–± –æ—à–∏–±–∫–µ."""
        from aiogram import Bot
        bot: Bot = event.bot if hasattr(event, 'bot') else None

        if bot:
            for admin_id in self.admin_ids:
                try:
                    event_info = f"–°–æ–±—ã—Ç–∏–µ: {type(event).__name__}"
                    event_text = self._extract_event_text(event)
                    if event_text:
                        event_info += f", —Ç–µ–∫—Å—Ç: {event_text}"

                    full_message = (
                        f"üö® –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:\n\n"
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_str}\n"
                        f"–û—à–∏–±–∫–∞: {error_message}\n"
                        f"{event_info}"
                    )

                    await bot.send_message(admin_id, full_message)

                    loggers.info(
                        text=f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –æ—à–∏–±–∫–µ",
                        log_type="ADMIN_NOTIFIED",
                        user=user_str
                    )

                except Exception as e:
                    loggers.error(
                        text=f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ {admin_id}: {e}",
                        log_type="ADMIN_NOTIFY_ERROR",
                        user=user_str
                    )

    @staticmethod
    async def _send_error_message(
            event: TelegramObject,
            user_str: str
    ) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ."""
        error_text = (
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. "
            "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start"
        )

        try:
            if isinstance(event, Message):
                await event.answer(error_text)
            elif isinstance(event, CallbackQuery):
                await event.message.answer(error_text)
                await event.answer()
            elif isinstance(event, Update) and event.message:
                await event.message.answer(error_text)

            loggers.info(
                text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ",
                log_type="ERROR_MESSAGE_SENT",
                user=user_str
            )

        except Exception as e:
            loggers.error(
                text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}",
                log_type="ERROR_MESSAGE_FAILED",
                user=user_str
            )
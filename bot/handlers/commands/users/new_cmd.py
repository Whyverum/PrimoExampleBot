import re
from typing import Optional, Dict, Tuple

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.i18n import gettext as _

from bot.core.bots import BotInfo
from bot.keyboards.inline.decision import decision_keyboard
from bot.states.new_states import NewStates
from bot.templates import msg
from middleware.loggers import log
from configs import COMMANDS, ImportantID, RpValue

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –º–∞–ø–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤—è–∑–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-—Ç–æ–ø–∏–∫
user_topic_map: Dict[Tuple[int, str], int] = {}

__all__ = ("router",)
CMD: str = "new"
router: Router = Router(name=f"{CMD}_cmd_router")
TOPIC_TYPE: str = "anketa"

TEXTS: Dict[str, Dict[str, str]] = {
    "anketa": {
        "accept": f"<b>üéâ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞!</b>\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç!\n\n–§–ª—É–¥: {RpValue.FLUD_URL}\n–†–æ–ª–µ–≤–∞—è: {RpValue.RP_URL}",
        "reject": "<b>‚ùå –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.</b>\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ."
    }
}


async def validate_russian_text(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä—É—Å—Å–∫–∏–º –±—É–∫–≤–∞–º, –ø—Ä–æ–±–µ–ª–∞–º –∏ –¥–µ—Ñ–∏—Å–∞–º."""
    return bool(re.fullmatch(r"[–ê-–Ø–∞-—è–Å—ë\s\-]+", text))


# ===================== –ö–æ–º–∞–Ω–¥–∞ /new =====================
@router.callback_query(F.data == CMD)
@router.message(Command(*COMMANDS[CMD], prefix=BotInfo.prefix, ignore_case=True))
@log(level='INFO', log_type=CMD.upper(), text=f"–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /{CMD}")
async def new_cmd(message: Message | CallbackQuery, state: FSMContext) -> None:
    """
    –ù–∞—á–∞–ª–æ –∞–Ω–∫–µ—Ç—ã /new.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π —É–∫–∞–∑–∞—Ç—å –∂–µ–ª–∞–µ–º—É—é —Ä–æ–ª—å.
    """
    await state.clear()
    await state.set_state(NewStates.role)

    ikb: InlineKeyboardBuilder = InlineKeyboardBuilder()
    ikb.row(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞‚Ü©Ô∏è", callback_data='start'))

    text: str = _(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Ä–æ–ª—å:\n"
        "(—Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏–ª–∏ –¥–µ—Ñ–∏—Å—ã)"
    )

    await msg(message=message, text=text, markup=ikb)


# ===================== –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ–ª–∏ =====================
@router.message(NewStates.role)
async def process_role(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ä–æ–ª–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–æ—Ä—Ç–æ–ª."""
    if not await validate_russian_text(message.text):
        await message.reply("–û—à–∏–±–∫–∞: —Ä–æ–ª—å –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏–ª–∏ –¥–µ—Ñ–∏—Å—ã.")
        return

    await state.update_data(role=message.text.strip().title())
    await state.set_state(NewStates.sorol)

    ikb: InlineKeyboardBuilder = InlineKeyboardBuilder()
    ikb.row(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞‚Ü©Ô∏è", callback_data='start'))

    await message.reply(
        text="–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Å–æ—Ä—Ç–æ–ª:\n(—Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏–ª–∏ –¥–µ—Ñ–∏—Å—ã)",
        reply_markup=ikb.as_markup()
    )


# ===================== –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ä—Ç–æ–ª–∞ =====================
@router.message(NewStates.sorol)
async def process_sortol(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å–æ—Ä—Ç–æ–ª–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–¥–æ–≤—É—é —Ñ—Ä–∞–∑—É."""
    if not await validate_russian_text(message.text):
        await message.reply("–û—à–∏–±–∫–∞: —Å–æ—Ä–æ–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏–ª–∏ –¥–µ—Ñ–∏—Å—ã.")
        return

    await state.update_data(sortol=message.text.strip().title())
    await state.set_state(NewStates.code_phrase)

    ikb: InlineKeyboardBuilder = InlineKeyboardBuilder()
    ikb.row(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞‚Ü©Ô∏è", callback_data='start'))

    await message.reply(
        text="–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥–æ–≤—É—é —Ñ—Ä–∞–∑—É –∏–∑ –ø—Ä–∞–≤–∏–ª:",
        reply_markup=ikb.as_markup()
    )


# ===================== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–æ–≤–æ–π —Ñ—Ä–∞–∑—ã =====================
@router.message(NewStates.code_phrase)
async def process_code_phrase(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–¥–æ–≤–æ–π —Ñ—Ä–∞–∑—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç—ã."""
    code_phrase = message.text.strip()
    if not code_phrase:
        await message.reply("–ö–æ–¥–æ–≤–∞—è —Ñ—Ä–∞–∑–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.")
        return

    await state.update_data(code_phrase=code_phrase)
    data: Dict[str, str] = await state.get_data()

    ikb: InlineKeyboardBuilder = InlineKeyboardBuilder()
    ikb.row(
        InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å!", callback_data="submit_new"),
        InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞‚Ü©Ô∏è", callback_data="start")
    )

    text: str = (
        f"<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã:</b>\n\n"
        f"‚Ä¢ –†–æ–ª—å: {data['role']}\n"
        f"‚Ä¢ –°–æ—Ä—Ç–æ–ª: {data['sortol']}\n"
        f"‚Ä¢ –ö–æ–¥–æ–≤–∞—è —Ñ—Ä–∞–∑–∞: {data['code_phrase']}"
    )

    await message.reply(text, reply_markup=ikb.as_markup())


# ===================== –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∫–µ—Ç—ã –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É =====================
@router.callback_query(F.data == "submit_new")
async def submit_new_cmd(callback: CallbackQuery, state: FSMContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–Ω–∫–µ—Ç—É –≤ —Ç–æ–ø–∏–∫ —Ñ–æ—Ä—É–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –≤ –º–∞–ø–µ."""
    data: Dict[str, str] = await state.get_data()
    user = callback.from_user

    # –°–æ–∑–¥–∞–µ–º —Ç–æ–ø–∏–∫ –≤ —Ñ–æ—Ä—É–º–µ
    topic = await callback.bot.create_forum_topic(
        chat_id=ImportantID.SUPPORT_CHAT_ID,
        name=f"–ê–Ω–∫–µ—Ç–∞ –æ—Ç {user.full_name}"
    )
    thread_id: int = topic.message_thread_id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-—Ç–æ–ø–∏–∫
    user_topic_map[(user.id, TOPIC_TYPE)] = thread_id

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã
    text: str = (
        f'<b><a href="tg://user?id={user.id}">–ê–Ω–∫–µ—Ç–∞</a></b>\n\n'
        f"‚Ä¢ –†–æ–ª—å: {data['role']}\n"
        f"‚Ä¢ –°–æ—Ä—Ç–æ–ª: {data['sortol']}\n"
        f"‚Ä¢ –ö–æ–¥–æ–≤–∞—è —Ñ—Ä–∞–∑–∞: {data['code_phrase']}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–æ–ø–∏–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–∏–Ω—è—Ç–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    await callback.bot.send_message(
        chat_id=ImportantID.SUPPORT_CHAT_ID,
        message_thread_id=thread_id,
        text=text,
        parse_mode="HTML",
        reply_markup=decision_keyboard(thread_id=thread_id, kind=TOPIC_TYPE)
    )

    await callback.message.edit_text("‚úÖ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!")
    await state.clear()


# ===================== –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤ =====================
@router.callback_query(F.data.regexp(r"^([a-z_]+):(accept|reject):(\d+)$"))
async def process_decision_callback(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    kind, action, thread_id_str = callback.data.split(":")
    thread_id = int(thread_id_str)

    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ thread_id –≤ –º–∞–ø–µ
    user_id = None
    for (uid, k), tid in user_topic_map.items():
        if k == kind and tid == thread_id:
            user_id = uid
            break

    if not user_id:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    text_to_send: Optional[str] = TEXTS.get(kind, {}).get(action)
    if not text_to_send:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return

    await callback.bot.send_message(chat_id=user_id, text=text_to_send, parse_mode="HTML")
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")


# ===================== –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é =====================
@router.message(F.is_topic_message, F.reply_to_message, ~F.from_user.is_bot)
async def forward_reply_to_user(message: Message) -> None:
    """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ —Ç–æ–ø–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    thread_id = message.message_thread_id
    if not thread_id:
        return

    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ thread_id
    user_id = None
    for (uid, _), tid in user_topic_map.items():
        if tid == thread_id:
            user_id = uid
            break

    if not user_id:
        return

    reply_text: str = f"<b>–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n{message.html_text}"
    try:
        await message.bot.send_message(chat_id=user_id, text=reply_text, parse_mode="HTML")
    except Exception as e:
        await message.reply(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
from pathlib import Path
from typing import Dict


def count_python_lines(project_path: str = ".", exclude: str = ".venv") -> Dict[str, int]:
    """
    –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞ –≤–æ –≤—Å–µ—Ö Python (.py) —Ñ–∞–π–ª–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞.

    Args:
        project_path (str): –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî —Ç–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞.
        exclude (str): –ò–º—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, .venv).

    Returns:
        Dict[str, int]: –°–ª–æ–≤–∞—Ä—å —Å –¥–≤—É–º—è –∫–ª—é—á–∞–º–∏:
            - "files": –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ .py
            - "lines": –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤–æ –≤—Å–µ—Ö .py —Ñ–∞–π–ª–∞—Ö
    """
    root: Path = Path(project_path)
    total_lines: int = 0
    file_count: int = 0

    # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –æ–±—Ö–æ–¥ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
    for file_path in root.rglob("*.py"):
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º .venv –∏ –ª—é–±—ã–µ –ø–æ–¥–ø–∞–ø–∫–∏ –≤–Ω—É—Ç—Ä–∏ –Ω–µ–≥–æ
        if exclude in file_path.parts:
            continue

        try:
            with file_path.open("r", encoding="utf-8") as f:
                # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ
                line_count = sum(1 for _ in f)
                total_lines += line_count
                file_count += 1
        except (UnicodeDecodeError, PermissionError):
            # –ò–Ω–æ–≥–¥–∞ –º–æ–≥—É—Ç –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è –±–∏—Ç—ã–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –±–µ–∑ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
            continue

    return {"files": file_count, "lines": total_lines}


if __name__ == "__main__":
    stats = count_python_lines()
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {stats['files']}")
    print(f"üìÑ –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞: {stats['lines']}")
